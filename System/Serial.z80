; ------------------------------------------------------------------------------
; Serial.z80
; ------------------------------------------------------------------------------
; MC6850P ACIA Driver
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------
.SLOT:             EQU   SLOT2

.CONTROL_PORT:     EQU   .SLOT + $00
.DATA_PORT:        EQU   .SLOT + $01

.MASTER_RESET:     EQU   00000011b
.RTS_LOW:          EQU   10010110b
.RTS_HIGH:         EQU   11010110b

Serial.Initialize:
    ; Send 00000011 to Control Register for Master Reset
    ; Send 00000010 to Control Register for "clock div 64"
    ;   OR 00010100 for "8 bits, 1 stop, no parity"

    ; Master Reset
    LD      A, .MASTER_RESET
    OUT     (.CONTROL_PORT), A

    ; Initialize the 6850 chip
    LD      A, .RTS_LOW
    OUT     (.CONTROL_PORT), A

    RET


; ------------------------------------------------------------------------------
Serial.TXA:
    PUSH    AF
.TX_WAIT_LOOP:
    IN      A, (.CONTROL_PORT)       ; Test if send buffer is full
    BIT     1, A
    JR      Z, .TX_WAIT_LOOP         ; If buffer full, keep waiting
    POP     AF
    OUT     (.DATA_PORT), A          ; Write the character
    RET    

; ------------------------------------------------------------------------------
Serial.IRQHandler:
    PUSH    AF
    PUSH    HL

    IN      A, (.CONTROL_PORT)
    AND     $01                                 ; Check if interupt due to read buffer full
    JR      Z, .IRQSkip                   ; if not, ignore

    LD      A, .RTS_HIGH
    OUT     (.CONTROL_PORT), A

    IN      A, (.DATA_PORT)
    PUSH    AF
    LD      A, (.BUFFER_USED)
    CP      .BUFFER_SIZE
    JR      NZ, .NotFull
    POP     AF
    JR      .IRQSkip

.NotFull:
    LD      HL, (.WR_POINTER)
    INC     HL
    LD      A, L
    CP      (.BUFFER + .BUFFER_SIZE) & $FF
    JR      NZ, .NotWrap
    LD      HL, .BUFFER
.NotWrap:
    LD      (.WR_POINTER), HL
    POP     AF
    LD      (HL), A
    LD      A, (.BUFFER_USED)
    INC     A
    LD      (.BUFFER_USED), A
    CP      .FULLSIZE
    JR      C, .IRQSkip
    LD      A, .RTS_HIGH
    OUT     (.CONTROL_PORT), A
.IRQSkip:
    POP     HL
    POP     AF
    EI
    RETI

.BUFFER_SIZE:      EQU   $3F
.FULLSIZE:         EQU   .BUFFER_SIZE - $0F
.EMPTYSIZE:        EQU   $05

.BUFFER:           DS    .BUFFER_SIZE
.WR_POINTER:       DS    2
.RD_POINTER:       DS    2
.BUFFER_USED:      DS    1

Serial.Read:
    LD      A, (.BUFFER_USED)
    CP      $00
    JR      Z, Serial.Read
    PUSH    HL
    LD      HL, (.RD_POINTER)
    INC     HL
    LD      A, L             ; Only need to check low byte becasuse buffer<256 bytes
    CP      (.BUFFER+.BUFFER_SIZE) & $FF
    JR      NZ, .notRdWrap
    LD      HL, .BUFFER
.notRdWrap:      
    DI
    LD      (.RD_POINTER), HL
    LD      A, (.BUFFER_USED)
    DEC     A
    LD      (.BUFFER_USED), A
    CP      .EMPTYSIZE
    JR      NC, .rts1
    LD      A, .RTS_LOW
    OUT     (.CONTROL_PORT), A
.rts1:
    LD      A,(HL)
    EI
    POP     HL
    RET                      ; Char ready in A

; ------------------------------------------------------------------------------
Serial.IsCharAvailable:
    LD    A, (.BUFFER_USED)
    CP    $00
    RET

