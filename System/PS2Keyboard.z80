; ------------------------------------------------------------------------------
; PS2Keyboard.z80
; ------------------------------------------------------------------------------
; PS/2 Keyboard Driver
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------
; PS2Keyboard:    PROC
; ------------------------------------------------------------------------------

.Port:           EQU SLOT1                   ; Port number for the PS2 device

.ScanCode:       DS  1
.Flags:          DS  1

.Flag_Shift:     EQU 0
.Flag_Ctrl:      EQU 1
.Flag_Alt:       EQU 2
.Flag_Extend:    EQU 3
.Flag_Release:   EQU 4
.Flag_Released:  EQU 5               ; This is for code that wants to know when a key has been released (bit of a hack, admittedly)    

PS2Keyboard.Initialize:
    XOR     A
    LD      (.ScanCode), A
    LD      (.Flags), A

    ; Set up the input buffer
    LD    HL, .BUFFER
    LD    (.WR_POINTER),HL
    LD    (.RD_POINTER),HL
    XOR   A                          ; 0 to accumulator
    LD    (.BUFFER_USED),A

    RET

.WaitForKeyRelease:
    LD      A, (.Flags)
    BIT     .Flag_Released, A
    JR      Z, .WaitForKeyRelease
    RES     .Flag_Released, A
    LD      (.Flags), A
    RET

PS2Keyboard.IRQHandler:
    PUSH    AF
    PUSH    BC
    PUSH    HL

    IN      A, (.Port)

    CP      $F0                             ; Check for "break" code (key released)
    JP      Z, .KeyReleased

    CP      $12                             ; Test left shift
    JP      Z, .ProcShiftKey
    CP      $59                             ; Test right shift
    JP      Z, .ProcShiftKey

    CP      $14                             ; Test left control
    JP      Z, .ProcCtrlKey

    CP      $11                             ; Test left alt
    JP      Z, .ProcAltKey

    CP      $84                             ; See if we're past the end of the scan code table
    JR      NC, .IRQExit

    LD      (.ScanCode), A

    LD      A, (.Flags)
    BIT     4, A
    JR      Z, .AcceptKey
    RES     .Flag_Release, A                 ; Reset the KeyRelease flag
    SET     .Flag_Released, A                ; Reset the KeyReleased flag
    LD      (.Flags), A
    JR      .IRQExit

.AcceptKey:
    BIT     .Flag_Shift, A                   ; Test whether we're in a shift state
    JR      NZ, .LoadShiftedTable
    LD      HL, ScanCodeTable.Lowercase
    JR      .TranslateScanCode
.LoadShiftedTable:
    LD      HL, ScanCodeTable.Uppercase
.TranslateScanCode:
    LD      A, (.ScanCode)
    LD      BC, $0000
    LD      C, A

    ADD     HL, BC
    LD      A, (HL)
    CP      0

    PUSH    AF
    LD      A, (.Flags)
    BIT     .Flag_Ctrl, A
    JR      Z, .SkipCtrl
    POP     AF
    RES     6, A
    RES     5, A
    PUSH    AF
.SkipCtrl:
    POP     AF
    CP      0
    CALL    NZ, .Accept                       ; Accept it if we have a nonzero character

.IRQExit:
    XOR     A
    LD      (.ScanCode), A
    POP     HL
    POP     BC
    POP     AF
    EI
    RETI

.KeyReleased:
    LD      A, (.Flags)
    SET     .Flag_Release, A                 ; Set the KeyRelease flag
    LD      (.Flags), A
    JR      .IRQExit

.ProcShiftKey:
    LD      A, (.Flags)
    BIT     .Flag_Release, A
    JR      NZ, .ProcShiftRelease
    SET     .Flag_Shift, A                   ; Set the Shift flag
    LD      (.Flags), A
    JR      .IRQExit
.ProcShiftRelease:
    RES     .Flag_Shift, A                   ; Clear the KeyRelease and Shift flags
    RES     .Flag_Release, A
    LD      (.Flags), A
    JP      .IRQExit

.ProcCtrlKey:
    LD      A, (.Flags)
    BIT     .Flag_Release, A
    JR      NZ, .ProcCtrlRelease
    SET     .Flag_Ctrl, A
    LD      (.Flags), A
    JR      .IRQExit
.ProcCtrlRelease:
    RES     .Flag_Ctrl, A                    ; Clear the KeyRelease and Ctrl flags
    RES     .Flag_Release, A
    LD      (.Flags), A
    JR      .IRQExit

.ProcAltKey:
    LD      A, (.Flags)
    BIT     .Flag_Release, A
    JR      NZ, .ProcAltRelease
    SET     .Flag_Alt, A                     ; Set the Alt flag
    LD      (.Flags), A
    JR      .IRQExit
.ProcAltRelease:
    RES     .Flag_Alt, A                     ; Clear the KeyRelease and Ctrl flags
    RES     .Flag_Release, A
    LD      (.Flags), A
    JR      .IRQExit

.BUFFER_SIZE:      EQU   $3F
.FULLSIZE:         EQU   .BUFFER_SIZE - $0F
.EMPTYSIZE:        EQU   $05

.BUFFER:           DS    .BUFFER_SIZE
.WR_POINTER:       DS    2
.RD_POINTER:       DS    2
.BUFFER_USED:      DS    1

; Accepts a byte into the buffer
.Accept:
    PUSH  AF
    LD    A, (.BUFFER_USED)
    CP    .BUFFER_SIZE                             ; If full then ignore
    JR    NZ, .notFull
    POP   AF
    RET
.notFull:
    LD    HL, (.WR_POINTER)
    INC   HL
    LD    A, L                                ; Only need to check low byte becasuse buffer<256 bytes
    CP    (.BUFFER+.BUFFER_SIZE) & $FF
    JR    NZ, .notWrap
    LD    HL, .BUFFER
.notWrap:
    LD    (.WR_POINTER), HL
    POP   AF
    LD    (HL), A
    PUSH  AF
    LD    A, (.BUFFER_USED)
    INC   A
    LD    (.BUFFER_USED), A
    CP    .FULLSIZE
    CALL  NC, .BufferFullAlert
    POP   AF
    RET

.BufferFullAlert:
    SYSCALL SC_Beep
    RET

PS2Keyboard.Read:
    LD    A, (.BUFFER_USED)
    CP    $00
    JR    Z, PS2Keyboard.Read
    PUSH  HL
    LD    HL, (.RD_POINTER)
    INC   HL
    LD    A, L                                ; Only need to check low byte becasuse buffer<256 bytes
    CP    (.BUFFER+.BUFFER_SIZE) & $FF
    JR    NZ, .notRdWrap
    LD    HL, .BUFFER
.notRdWrap:
    LD    (.RD_POINTER), HL
    LD    A, (.BUFFER_USED)
    DEC   A
    LD    (.BUFFER_USED), A
    LD    A, (HL)
    POP   HL
    RET                                       ; Char ready in A

; ------------------------------------------------------------------------------
PS2Keyboard.IsCharAvailable:
    LD    A, (.BUFFER_USED)
    CP    $00
    RET


    INCLUDE "PS2ScanCodeTable.z80"
