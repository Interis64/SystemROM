; ------------------------------------------------------------------------------
; Monitor.z80
; ------------------------------------------------------------------------------
; System monitor/debugger
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------
; Commands
; M addr        - Start interactive memory editor at address 'addr'
; D addr size   - Dump 'size' bytes of raw memory over serial port starting with address 'addr'
; X addr        - Jump to memory address hhll and execute code
; Q             - Quit the monitor (resume if we broke in via NMI, reset otherwise)
; ------------------------------------------------------------------------------

.CommandBufferMax:       EQU 16                                  ; Max of 16 chars for commands
.CommandBufferLength:    DS  1                                   ; Memory location for the current size of the command buffer
.CommandBuffer:          DS  .CommandBufferMax            ; Memory location for the command buffer (16 bytes)
.DataBufferMax:          EQU 23                                  ; Max of 23 chars for data (8 hex bytes with spaces between)
.DataBufferLength:       DS  1                                   ; Memory location for the current size of the data buffer
.DataStartAddress:       DS  2                                   ; Memory location for the Memory Editor start address
.DataBuffer:             DS  .DataBufferMax               ; Memory location for the data buffer (23 bytes)

; If we got here from an external call, then we'll swap out the registers
; so we don't clobber the running program. When the Monitor exits, we
; swap them back and give control back.
Monitor.DebugHandler:
    EX      AF, AF'
    EXX

    ; Call instead of jump, so we put this return address on the stack
    CALL    .ControlLoop
    
    ; When the user quits the monitor, we'll pick up here
    EXX
    EX      AF, AF'
    RET

Monitor.Start:
    LD      HL, $0000                       ; Push $0000 to the stack so we do a cold reset on a quit command
    PUSH    HL

.ControlLoop:
    CALL    .AcceptInput
    CALL    .ProcessInput
    JP      .ControlLoop

; -------------------------------------
; Accept Input - Reads up to 16 bytes of ASCII from the user
; -------------------------------------
.AcceptInput:
    LD      B, .CommandBufferMax
    XOR     A
    LD      HL, .CommandBuffer               ; Point HL at the command buffer
.ClearInputLoop:
    LD      (HL), A
    INC     HL
    DJNZ    .ClearInputLoop

    LD      HL, .CommandPrompt               ; Print our prompt
    CALL    Utils.PrintString
    XOR     A                                       ; Zero out the length
    LD      (.CommandBufferLength), A        
    LD      HL, .CommandBuffer               ; Point HL at the command buffer
.AcceptInputLoop:
    SYSCALL SC_ReadChar

    CP      '\n'                                    ; Ignore LF character
    JP      Z, .AcceptInputLoop

    CP      '\r'                                    ; CR completes input
    RET     Z

    CP      $08                                     ; Handle Backspace
    JP      Z, .AcceptBackspace

    CP      $1B
    JP      Z, .AcceptInput                  ; Esc key aborts the current line and prompts again

    LD      B, A
    LD      A, (.CommandBufferLength)        ; Check if we're at the max input size
    CP      .CommandBufferMax
    JP      Z, .AcceptInputLoop              ; If we're at max size, do nothing
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, B
    RST     $10                                     ; Echo back to the screen
    LD      (HL), A                                 ; Stuff in the command buffer
    INC     HL                                      ; Move to the next location
    LD      A, (.CommandBufferLength)        ; Increment our length counter
    INC     A
    LD      (.CommandBufferLength), A        
    JP      .AcceptInputLoop                 ; Wait for the next input

.AcceptBackspace:
    LD      A, (.CommandBufferLength)        ; Load our length counter
    CP      $00                                     ; If we're at zero length, can't backspace
    JP      Z, .AcceptInputLoop              ; So just go back to our input loop
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, $08
    RST     $10                                     ; Output the backspace char
    DEC     HL                                      ; Go back a spot
    LD      A, (.CommandBufferLength)        ; Decrement our length counter
    DEC     A
    LD      (.CommandBufferLength), A
    JP      .AcceptInputLoop

; -------------------------------------
; Process Input - Decides what to do based on the user's input
; -------------------------------------
.ProcessInput:
    LD      A, (.CommandBufferLength)
    CP      0
    RET     Z
    LD      HL, .CommandBuffer
    LD      A, (HL)
.ProcessInputLoop:
    CP      'M'
    JP      Z, .ProcessMemoryEditorCommand
    CP      'X'
    JP      Z, .ProcessExecuteCommand
    CP      'D'
    JP      Z, .ProcessDumpCommand
    CP      'I'
    JP      Z, .ProcessInputCommand
    CP      'O'
    JP      Z, .ProcessOutputCommand
    CP      'Q'
    JP      Z, .ProcessQuitCommand
    CP      'R'
    JP      Z, .ProcessReadCommand
    CP      'a'                             ; Check if we're in lowercase range
    JP      C, .CommandError         ; if not, we've got an error
    SUB     $20                             ; If so, convert to uppercase
    JP      .ProcessInputLoop        ; and try again
    ; Unknown, so complain to the user and ask again
.CommandError:
    LD      HL, .UnknownCommandString
    JP      Utils.PrintString

; -------------------------------------
; Memory Editor Command [M addr]
; -------------------------------------
.ProcessMemoryEditorCommand:
    LD      A, (.CommandBufferLength) ; Check command length
    CP      6                               ; 6 bytes
    JP      NZ, .MemoryEditorCommandError
    LD      HL, .CommandBuffer+2
    CALL    .ReadHexWord
    EX      DE, HL
    LD      (.DataStartAddress), HL

    LD      A, '\n'
    SYSCALL SC_PrintChar
    JP      .ME_ControlLoop

.MemoryEditorCommandError:
    LD      HL, .MemoryEditorCommandErrorString
    JP      Utils.PrintString

.MemoryEditorCommandErrorString:
    DB      "\r\n ?? Syntax Error, expected \"M addr\"", $00


.ME_ControlLoop:
    CALL    .ME_PrintMemory
    CALL    .ME_AcceptInput
    CALL    .ME_ProcessInput
    JP      .ME_ControlLoop

; Prints out 8 bytes of memory from the current address pointer as hex
.ME_PrintMemory:
    LD      A, '\r'
    SYSCALL SC_PrintChar
    LD      A, '['
    SYSCALL SC_PrintChar
    LD      HL, (.DataStartAddress)  ; Get the address pointer
    PUSH    HL                              ; Copy to DE
    POP     DE
    CALL    .PrintHexWord            ; Print address pointer
    LD      A, ']'
    SYSCALL SC_PrintChar

    LD      B, 8
.ME_PrintMemoryLoop:
    LD      A, ' '
    SYSCALL SC_PrintChar
    LD      A, (HL)
    CALL    .PrintHexByte
    INC     HL
    DJNZ    .ME_PrintMemoryLoop
    RET

.ME_AcceptInput:
    LD      A, ' '                          ; Clear out the input buffer with blanks
    LD      HL, .DataBuffer
    LD      B, .DataBufferMax
.ME_ClearInputBufferLoop:
    LD      (HL), A
    INC     HL
    DJNZ    .ME_ClearInputBufferLoop
    XOR     A                               ; Set the buffer length to zero
    LD      (.DataBufferLength), A

    LD      HL, .DataPrompt          ; Print our prompt
    CALL    Utils.PrintString
    LD      HL, .DataBuffer          ; Point HL at the data buffer
.ME_AcceptInputLoop:
    SYSCALL SC_ReadChar
    CP      '\r'                            ; CR completes input
    RET     Z                               ; So return out of the input loop
    CP      $08                             ; Ignore LF character
    JP      Z, .ME_AcceptInputLoop
    CP      $08                             ; Handle Backspace
    JP      Z, .ME_AcceptBackspace
    CP      $1B
    JP      Z, .ME_AcceptEscape      ; Esc key handler

    LD      B, A                            ; Temporary store of input char
    LD      A, (.DataBufferLength)   ; Check if we're at the max input size
    CP      .DataBufferMax
    JP      Z, .ME_AcceptInputLoop   ; If we're at max size, do nothing
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, B                            ; Restore input char
    RST     $10                             ; Echo back to the screen
    LD      (HL), A                         ; Stuff into the data buffer
    INC     HL                              ; Move to the next location
    LD      A, (.DataBufferLength)   ; Increment our length counter
    INC     A
    LD      (.DataBufferLength), A        
    JP      .ME_AcceptInputLoop      ; Wait for the next input

.ME_AcceptEscape:
    LD      A, (.DataBufferLength)   ; Load our length counter
    CP      $00                             ; If we've entered text, clear it and accept input again
    JP      NZ, .ME_AcceptInput              
                                            ; But if it's a blank line, we exit the memory editor
    POP     HL                              ; Pop off the extra stack pointer
    RET                                     ; This should return back to the main monitor loop

.ME_AcceptBackspace:
    LD      A, (.DataBufferLength)   ; Load our length counter
    CP      $00                             ; If we're at zero length, can't backspace
    JP      Z, .ME_AcceptInputLoop   ; So just go back to our input loop
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, $08                     ;
    RST     $10                             ; Output the backspace char
    DEC     HL                              ; Go back a spot
    LD      A, (.DataBufferLength)   ; Decrement our length counter
    DEC     A
    LD      (.DataBufferLength), A
    JP      .ME_AcceptInputLoop

; -------------------------------------
; ME Process Input - Parses/writes any new data bytes and increments the address pointer
; -------------------------------------
.ME_ProcessInput:
    LD      A, (.DataBufferLength)   ; If the user entered nothing, then go to the next memory block
    CP      0
    JP      Z, .ME_IncrementAddress
    LD      HL, .DataBuffer
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte
    CALL    .ME_CheckDataByte

    LD      HL, .DataBuffer
    LD      DE, (.DataStartAddress)
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte
    CALL    .ME_UpdateDataByte

    RET

.ME_IncrementAddress:
    LD      HL, (.DataStartAddress)
    INC     HL
    INC     HL
    INC     HL
    INC     HL
    INC     HL
    INC     HL
    INC     HL
    INC     HL
    LD      (.DataStartAddress), HL
    RET

.ME_CheckDataByte:
    LD      A, (HL)
    CP      ' '
    JP      Z, .ME_CheckDataByteSkip
    CALL    .TestHexDigitSpace
    JP      PO, .ME_DataError
    INC     HL
    LD      A, (HL)
    CALL    .TestHexDigitSpace
    JP      PO, .ME_DataError
    INC     HL
    INC     HL
    RET
.ME_CheckDataByteSkip:
    INC     HL
    INC     HL
    INC     HL
    RET

.ME_UpdateDataByte:
    LD      A, (HL)                         ; If it's a space, we can skip this byte
    CP      ' '
    JP      Z, .ME_UpdateDataByteSkip
    CALL    .ReadHexByte
    LD      (DE), A                         ; Store the new value
    INC     DE
    INC     HL                              ; Skip the space after the value
    RET
.ME_UpdateDataByteSkip:
    INC     DE
    INC     HL
    INC     HL
    INC     HL
    RET

.ME_DataError:
    LD      HL, .ErrorString
    CALL    Utils.PrintString
    POP     HL                              ; Pop off an extra stack frame
    RET

; -------------------------------------
; Execute Command [X addr]
; -------------------------------------
.ProcessExecuteCommand:
    LD      A, (.CommandBufferLength)        ; Check command length
    CP      6                               ; 6 bytes
    JP      NZ, .ExecuteCommandError
    LD      HL, .CommandBuffer+2
    CALL    .ReadHexWord
    PUSH    DE                              ; Push onto the stack and we'll abuse RET to jump there
    RET                                     ; This is going to jump to the address we just pushed from DE

.ExecuteCommandError:
    LD      HL, .ExecuteCommandErrorString
    JP      Utils.PrintString

.ExecuteCommandErrorString:
    DB      "\r\n ?? Syntax Error, expected \"X addr\"", $00

; Note that we don't really expect to come back from where we jumped,
; but a RET from there will send us back into the monitor loop

; -------------------------------------
; Dump Command [D addr size]
; -------------------------------------
.ProcessDumpCommand:
    LD      A, (.CommandBufferLength)        ; Check command length
    CP      11                              ; 11 bytes
    JP      NZ, .DumpCommandError
    LD      HL, .CommandBuffer+1
    LD      A, (HL)
    CP      $20                             ; Next char needs to be ASCII space
    JP      Z, .DumpCommandError
    INC     HL
    CALL    .ReadHexWord             ; This is the starting address
    PUSH    DE
    INC     HL                              ; Skip the space
    CALL    .ReadHexWord             ; This is the byte length
    LD      B, D                            ; Copy to our counter
    LD      C, E
    POP     HL                              ; Get the address into HL

.DumpLoop:
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, (HL)
    RST     $10
    INC     HL
    DEC     BC
    LD      A, B
    OR      C
    JP      NZ, .DumpLoop


    RET

.DumpCommandError:
    LD      HL, .DumpCommandErrorString
    JP      Utils.PrintString

.DumpCommandErrorString:
    DB      "\r\n ?? Syntax Error, expected \"D addr size\"", $00

; -------------------------------------
; Quit command [Q]
; -------------------------------------
.ProcessQuitCommand:
    LD      A, (.CommandBufferLength) ; Check command length
    CP      1                               ; 1 byte
    JP      NZ, .QuitCommandError
    CALL    Utils.PrintCRLF
    POP     HL                              ; Pop off our monitor return address
    RET                                     ; Return to the previous address (outside of Monitor)

.QuitCommandError:
    LD      HL, .QuitCommandErrorString
    JP      Utils.PrintString

.QuitCommandErrorString:
    DB      "\r\n ?? Syntax Error, expected \"Q\"", $00


; -------------------------------------
; I/O Out command [O]
; - Syntax: O XX YY
; - Where XX is the IO Adddress
; - and YY is the byte to output
; -------------------------------------
.ProcessOutputCommand:
    LD      A, (.CommandBufferLength)        ; Check command length
    CP      7                                       ; 7 bytes
    JP      NZ, .OutputCommandError
    LD      HL, .CommandBuffer+2
    CALL    .ReadHexByte
    LD      C, A
    LD      HL, .CommandBuffer+6
    OUT     (C), A
    CALL    Utils.PrintCRLF
    RET                                             ; Return to the previous address (outside of Monitor)

.OutputCommandError:
    LD      HL, .OutputCommandErrorString
    JP      Utils.PrintString

.OutputCommandErrorString:
    DB      " ?? Syntax Error, expected \"O port data\"", $00

; -------------------------------------
; I/O In command [I]
; - Syntax: I XX
; - Where XX is the IO Adddress
; -------------------------------------
.ProcessInputCommand:
    LD      A, (.CommandBufferLength)        ; Check command length
    CP      4                                       ; 4 bytes
    JP      NZ, .CommandError
    LD      HL, .CommandBuffer+2
    CALL    .ReadHexByte
    LD      C, A
    IN      A, (C)
    CALL    .PrintHexByte
    CALL    Utils.PrintCRLF
    RET                                             ; Return to the previous address (outside of Monitor)

.InputCommandError:
    LD      HL, .InputCommandErrorString
    JP      Utils.PrintString

.InputCommandErrorString:
    DB      " ?? Syntax Error, expected \"I port\"", $00

; -------------------------------------
; Data Read Command [R]
; - Syntax: R XXXX
; - Where XXXX is the address where to write the data received
; - This address is added to the offset present in the hex records
; -------------------------------------
.ProcessReadCommand:
    LD      A, (.CommandBufferLength) ; Get the entered command length
    CP      6                               ; Check if it's 6 bytes
    JP      NZ, .ReadCommandError    ; Not 6 bytes, so throw an error
    LD      HL, .CommandBuffer + 2   ; Advance to the command argument
    CALL    .ReadHexWord             ; Stores the argument in DE
    LD      HL, .ReadCommandPrompt   ; Load the prompt string
    SYSCALL SC_PrintString                  ; Print it
    JP      .IHX.ParseRecord         ; Go to the parsing routine

.ReadCommandError:
    LD      HL, .ReadCommandErrorString
    JP      Utils.PrintString

.ReadCommandErrorString:
    DB      "\r\n ?? Syntax Error, expected \"R addr\"", $00
.ReadCommandPrompt:
    DB      "\r\n\r\n Waiting for serial data...\r\n Press ESC to cancel.\r\n\r\n", $00

; ----------------------------
; Intel HEX Reader Routines
; ----------------------------
.IHX.ParseRecord:
    SYSCALL SC_InputReady
    JP      Z, .IHX.ParseRecord.CheckSerial
    CALL    .IHX.CheckCancel
    RET     Z
.IHX.ParseRecord.CheckSerial:
    SYSCALL SC_SerialReady
    JP      Z, .IHX.ParseRecord
    SYSCALL SC_SerialRead                ; Get next char from buffer
    SYSCALL SC_PrintChar
    CP      ':'                             ; Check if it's a colon
    JP      NZ, .IHX.ParseRecord     ; If not, get the next char
    CALL    .IHX.ParseByte           ; Get the record length
    LD      B, A                            ; Store into B
    CALL    .IHX.ParseByte           ; Get the destination address high byte
    LD      H, A                            ; Store into H
    CALL    .IHX.ParseByte           ; Get the destination address low byte
    LD      L, A                            ; Store into L
    ADD     HL, DE                          ; Adjust the memory address
    CALL    .IHX.ParseByte           ; The the record type into A
    CP      0                               ; Is record type 0 (Data)?
    RET     NZ                              ; If not, assume EOF, unsupported, or invalid, so exit
.IHX.DataReadLoop:
    CALL    .IHX.ParseByte           ; Read the next byte
    LD      (HL), A                         ; Store at the address in HL
    INC     HL                              ; Next address
    DJNZ    .IHX.DataReadLoop        ; Go get the next byte
    CALL    .IHX.ParseByte           ; Read checksum byte
    LD      HL, .IHX.AcceptString
    SYSCALL SC_PrintString
    JP      .IHX.ParseRecord         ; Done with this record, so get the next

.IHX.CheckCancel:
    SYSCALL SC_ReadChar
    CP      $1B                      ; Is this an ESC char?
    RET

.IHX.AcceptString:
    DB      "\r\n  -  Record Accepted  - \r\n", $00

; Read the current and next character, parse as hex digits, and store in A
.IHX.ParseByte:
    PUSH    DE
    SYSCALL SC_SerialRead                ; Get next char from buffer
    SYSCALL SC_PrintChar
    CALL    .ReadHexNibble
    ADD     A, A
    ADD     A, A
    ADD     A, A
    ADD     A, A
    LD      D, A
    SYSCALL SC_SerialRead                ; Get next char from buffer
    SYSCALL SC_PrintChar
    CALL    .ReadHexNibble
    OR      D
    POP     DE
    RET

; ------------------------------------------------------------------------------
; Hexadecimal I/O routines
; ------------------------------------------------------------------------------
; Reads a 16-bit hex value from user input into DE
; (HL should point to the start of the four-character string in the input buffer)
.ReadHexWord:
    CALL    .ReadHexByte
    LD      D, A
    CALL    .ReadHexByte
    LD      E, A
    RET

; Reads an 8-bit hex value from user input into A
; (HL should point to the start of the two-character string in the input buffer)
.ReadHexByte:
    PUSH    DE
    LD      A, (HL)
    CALL    .ReadHexNibble
    ADD     A, A
    ADD     A, A
    ADD     A, A
    ADD     A, A
    LD      D, A
    INC     HL
    LD      A, (HL)
    CALL    .ReadHexNibble
    OR      D
    INC     HL
    POP     DE
    RET

.ReadHexNibble:
    CP      'a'
    JR      C, .ReadHexNibbleUC
    SUB     $20                             ; Convert Lowercase to Uppercase
.ReadHexNibbleUC:
    SUB     '0'
    CP      $0A
    RET     C
    SUB     'A'-'0'-10
    RET

; Prints the hex string representing the word value in DE
.PrintHexWord:
    LD      A, D
    CALL    .PrintHexByte
    LD      A, E
    ; Fall through to PrintHexByte

; Prints the hex string representing the byte value in A
.PrintHexByte:
    PUSH    AF
    RRA
    RRA
    RRA
    RRA
    CALL    .PrintHexNibble
    POP     AF
    ; Fall through to PrintHexNibble

; Prints the hex character representing the low nibble of A
.PrintHexNibble:
    AND     $0F
    ADD     A, $90
    DAA
    ADC     A, $40
    DAA
    SYSCALL SC_PrintChar
    RET

; Tests if A contains a valid hex digit
; Afterwards, you can do this:
; 	jp po,not_found
.TestHexDigit:
    PUSH    HL
    LD      HL, .HexDigits
    LD      BC, 22                          ; 22 possible characters
    CPIR
    POP     HL
    RET

; Tests if A contains a valid hex digit or a space
; Afterwards, you can do this:
; 	jp po,not_found
.TestHexDigitSpace:
    PUSH    HL
    PUSH    BC
    LD      HL, .HexDigits
    LD      BC, 23                          ; 23 possible characters
    CPIR
    POP     BC
    POP     HL
    RET

.HexDigits:
    DB      "0123456789ABCDEFabcdef "
.CommandPrompt:
    DB      "\r\n] ", $00
.DataPrompt:
    DB      "\r\n     : ", $00
.ErrorString:
    DB      "\r\n ?? Unknown Error", $00
.UnknownCommandString:
    DB      "\r\n ?? Unknown Command", $00
