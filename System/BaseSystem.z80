; ------------------------------------------------------------------------------
; BaseSystem.z80
; ------------------------------------------------------------------------------
; Interis startup and system call code. This contains the cold boot code and
; code for the various system calls available via RST $10.
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------
SYSCALL: MACRO CALLNUM
    PUSH    AF
    LD      A, CALLNUM
    LD      ($FFFF), A
    POP     AF
    RST     $10
    ENDM

ColdBoot:
    DI                                      ; Don't interrupt this process

    ; Turn on 64K mode
    LD      A, $01
    OUT     (0), A

    ; Copy the base RAM template over
    LD      BC, $0100
    LD      HL, $8000
    LD      DE, $0000
    LDIR
    
    EI                                      ; Reenable interrupts

    LD      HL, WarmBoot                    ; Change RST00 to Warm Boot
    LD      ($0001), HL
    ; Continue with warm boot
WarmBoot:
    CALL    PS2Keyboard.Initialize
    CALL    Serial.Initialize

    ; Clear screen
    LD      A, SC_Beep
    LD      (SyscallTarget), A
    RST     $10

    ; Clear screen
    LD      A, SC_PrintChar
    LD      (SyscallTarget), A
    LD      A, $0C
    RST     $10

    ; Print welcome messages
    LD      A, SC_PrintString
    LD      (SyscallTarget), A
    LD      HL, StartupMessage
    RST     $10

    ; Attempt to boot from storage driver
    LD      A, SC_DiskBoot
    LD      (SyscallTarget), A
    RST     $10
    ; If not, fall back to the monitor
    JP      Monitor.Start

SyscallExec:
    PUSH    AF                              ; Preserve AF
    PUSH    HL                              ; Preserve HL
    LD      HL, SyscallTable                ; Load the base address of the table
    LD      A, (SyscallTarget)              ; Load the call target
    ADD     A, L                            ; Calculate the target address in the table
    LD      L, A                            ; Update the table address
    LD      A, (HL)                         ; Load the low byte of the vector into A
    LD      (SyscallJump+1), A              ; Overwrite the low byte of the jump address
    INC     HL                              ; Go to the next byte in the table
    LD      A, (HL)                         ; Load the high byte of the vector into A
    LD      (SyscallJump+2), A              ; Overwrite the high byte of the jump address
    POP     HL                              ; Restore HL
    POP     AF                              ; Restore AF
SyscallJump:
    JP      $0000                           ; This jump address gets overwritten by the above code

SyscallNOP:
    RET

NullInterruptHandler:
    EI
    RETI

StartupMessage:
    DB $0C                                  ; Form Feed
    DB "               Interis 64\r\n"
    DB "            System ROM v1.0\r\n"
    DB "\r\n"
    DB "    (C) 2023 M. Martin - GNU GPL 3.0\r\n"
    DB "\r\n"
    DB "      https://github.com/Interis64\r\n"
    DB $00

    INCLUDE "PS2Keyboard.z80"
    INCLUDE "Serial.z80"
    INCLUDE "NVRAM.z80"
    INCLUDE "Utils.z80"
    INCLUDE "Monitor.z80"