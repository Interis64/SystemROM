; ------------------------------------------------------------------------------
; NVRAM.z80
; ------------------------------------------------------------------------------
; Dallas DS12885 RTC/NVRAM support
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------
NVRAM: PROC
; ------------------------------------------------------------------------------

SLOT:           EQU SLOT3			        ; NVRAM is on-board at SLOT 3
PORT_ADDR:      EQU SLOT
PORT_DATA:      EQU SLOT + $01

INT_VECTOR:     EQU $8150                   ; Programmable interrupt routine

; ------------------------------
; Memory Locations
; ------------------------------
CONTROL_A:      EQU $0A
CONTROL_B:      EQU $0B
CONTROL_C:      EQU $0C
CONTROL_D:      EQU $0D

SECONDS:        EQU $00
MINUTES:        EQU $02
HOURS:          EQU $04

DAY_OF_WEEK:    EQU $06
DATE:           EQU $07
MONTH:          EQU $08
YEAR:           EQU $09

GP_NVRAM:       EQU $0E
GP_LENGTH:      EQU $71
CHECKSUM_LOC:   EQU $7F

; Configuration NVRAM Locations
TMS9918A_SLOT:  EQU $14
OPL2_SLOT:      EQU $15
DISK_SLOT:      EQU $16

Defaults: PROC

REG_A: EQU 00100111b                        ; Enable oscillator, set square wave freq 1024Hz
REG_B: EQU 00000111b                        ; No interrupts, No square wave, binary datetime, 24-hour, DST on

    ENDP
; ------------------------------

Initialize:
    LD      A, Defaults.REG_A
    LD      B, $0A
    CALL    WriteRaw
    LD      A, Defaults.REG_B
    LD      B, $0B
    JP      WriteRaw

Beep:
    LD      C, PORT_ADDR
    LD      B, $0B
    OUT     (C), B
    LD      C, PORT_DATA
    ; IN      B, (C)
    ; SET     3, B
    LD      B, 00001111b
    OUT     (C), B

    LD	    B, $80
BeepWaitLoop:
    PUSH	BC
    LD	    B, $00
    DJNZ	$
    POP	    BC
    DJNZ	BeepWaitLoop

    LD      C, PORT_ADDR
    LD      B, $0A
    OUT     (C), B
    LD      C, PORT_DATA
    LD      B, 00100110b
    OUT     (C), B

    LD	    B, $80
BeepWaitLoop2:
    PUSH	BC
    LD	    B, $00
    DJNZ	$
    POP	    BC
    DJNZ	BeepWaitLoop2

    ; RES     3, B
    LD      C, PORT_ADDR
    LD      B, $0B
    OUT     (C), B
    LD      C, PORT_DATA
    LD      B, 00000111b
    OUT     (C), B
    RET

IRQHandler:
    PUSH    AF
    IN      A, ($0B)
    POP     AF
    EI
    RETI

SetAlarm:
    RET

Delay:
    RET

; Calculates the checksum of the NVRAM data
; Returns the value in A
ComputeChecksum:
    PUSH	BC
    PUSH	HL
    XOR     A
    LD      L, GP_NVRAM
    LD      B, GP_LENGTH
ChecksumLoop:
    LD      C, PORT_ADDR
    OUT     (C), L
    LD		C, PORT_DATA
    IN      H, (C)
    XOR     H
    INC     L
    DJNZ    ChecksumLoop
    POP	    HL
    POP	    BC
    RET

UpdateChecksum:
    PUSH	AF
    PUSH	BC

    LD      B, $7C
    LD      A, 'I'
    CALL    WriteRaw

    LD      B, $7D
    LD      A, '6'
    CALL    WriteRaw

    LD      B, $7E
    LD      A, '4'
    CALL    WriteRaw

    CALL    ComputeChecksum
    LD      B, $7F
    CALL    WriteRaw
    
    POP	    BC
    POP	    AF
    RET

WaitForUpdate:
    PUSH    BC

    LD      C, PORT_ADDR
    LD      B, $A0
    OUT     (C), B

    LD      C, PORT_DATA
WaitForUpdateLoop:
    IN      B, (C)
    BIT     7, B
    JP      Z, WaitForUpdateLoop

    POP     BC
    RET

WriteRaw: ; Writes the data in regA to the address in regB
    CALL    WaitForUpdate
    PUSH    BC
    LD      C, PORT_ADDR
    OUT     (C), B
    LD      C, PORT_DATA
    OUT     (C), A
    POP     BC
    RET

Write: ; Writes the data in regA to the address in regB and updates the checksum
    CALL    WriteRaw
    JP      UpdateChecksum

Read: ; Reads the data from address in regB into regA
    PUSH    BC
    LD      C, PORT_ADDR
    OUT     (C), B
    LD      C, PORT_DATA
    IN      A, (C)
    POP     BC
    RET

; Takes a hardware config location in A.
; Loads the slot number from that location.
; Converts that to an IO base address.
; Returns that address in A.
; Returns $FF if card not installed.
GetIOPort:
    LD      B, A
    CALL    Read
    CP      $FF
    RET     Z
    SLA     A
    SLA     A
    SLA     A
    SLA     A
    SLA     A
    RET

ValidateChecksum:
    PUSH	BC
    LD      B, $7C
    CALL    Read
    CP      'I'
    JP      NZ, ValidateChecksumReturn      ; Return with the zero flag not set

    LD      B, $7D
    CALL    Read
    CP      '6'
    JP      NZ, ValidateChecksumReturn      ; Return with the zero flag not set

    LD      B, $7E
    CALL    Read
    CP      '4'                             ; Check for a match
    JP      NZ, ValidateChecksumReturn      ; Return with the zero flag not set

    LD      B, CHECKSUM_LOC
    CALL    Read
    LD      B, A
    CALL    ComputeChecksum                 ; Calculate what the checksum SHOULD be
    CP      B                               ; Compare to the actual value
ValidateChecksumReturn:
    POP	    BC
    RET                                     ; Return with the compare result flags set
 
; ------------------------------------------------------------------------------
    ENDP
; ------------------------------------------------------------------------------
