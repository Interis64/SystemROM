; ------------------------------------------------------------------------------
; OPL2Utils.z80
; ------------------------------------------------------------------------------
; Support for Yamaha YM3812 (OPL-II) FM Synthesis chip. These are some utility
; functions for playing various sounds.
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------

; ------------------------------------------------------------------------------
; Set up some working space in memory to keep track of what each voice is doing
; at any point. Here's the format:
; 
; Offset    Description
; ------------------------------------------------------------------------------
;    $00    Frequency Value
;    $01    On/Off, Octave, Frequency Value
;
; ------------------------------------------------------------------------------
V_LENGTH:       EQU $10                     ; Define the length of the voice records in workspace

VO_FREQ:        EQU $00                     ; Frequency Low Bits
VO_OOF:         EQU $01                     ; On/Off, Octave, Frequency High Bits
VO_FEEDBK:      EQU $02                     ; Feedback Strength 
VO1_PARAM1:     EQU $03                     ; AM / Vib / EG Type / Key Scale / Multiple 
VO1_PARAM2:     EQU $04                     ; Key Scaling Level / Output Level
VO1_PARAM3:     EQU $05                     ; Attack Rate / Decay Rate
VO1_PARAM4:     EQU $06                     ; Sustain Level / Release Rate
VO1_WAVE:       EQU $07                     ; Waveform Select
VO2_PARAM1:     EQU $08                     ; AM / Vib / EG Type / Key Scale / Multiple 
VO2_PARAM2:     EQU $09                     ; Key Scaling Level / Output Level
VO2_PARAM3:     EQU $0A                     ; Attack Rate / Decay Rate
VO2_PARAM4:     EQU $0B                     ; Sustain Level / Release Rate
VO2_WAVE:       EQU $0C                     ; Waveform Select


WRKSPC:         EQU $8310
VOICE0:         EQU WRKSPC
VOICE1:         EQU VOICE0 + V_LENGTH
VOICE2:         EQU VOICE1 + V_LENGTH
VOICE3:         EQU VOICE2 + V_LENGTH
VOICE4:         EQU VOICE3 + V_LENGTH
VOICE5:         EQU VOICE4 + V_LENGTH
VOICE6:         EQU VOICE5 + V_LENGTH
VOICE7:         EQU VOICE6 + V_LENGTH
VOICE8:         EQU VOICE7 + V_LENGTH

DefaultInstrument:
    DB  00000000b                           ; Feedback Strength

                                            ; Operator 1 Values
    DB  00000001b                           ; AM/Vib/EG/KeyScale/Multiple
    DB  00000000b                           ; KSL/Level
    DB  11010100b                           ; A/D
    DB  01111111b                           ; S/R
    DB  00000000b                           ; Wave
    
                                            ; Operator 2 Values
    DB  00001000b                           ; AM/VIB/EG/KeyScale/Multiple
    DB  00000000b                           ; KSL/Level
    DB  11110110b                           ; A/D
    DB  01000101b                           ; S/R
    DB  00000001b                           ; Wave

CLEAR_WORKSPACE:
    LD      A, 0
    LD      B, V_LENGTH * 9
    LD      HL, WRKSPC
CLR_WRKSPC_LOOP:
    LD      (HL), A
    INC     HL
    DJNZ    CLR_WRKSPC_LOOP
    RET

; ------------------------------------------------------------------------------
; To use:
;   - Put the voice number in C
;   - Put the note data in HL (8 low bits in L, Octave and 2 high bits in H)
; ------------------------------------------------------------------------------
PLAY:   ; Play a note
    PUSH    AF
    PUSH    IX

    CALL    FIND_VOICE  

    CALL    STOP

    ; Store the note data in the workspace
    LD      A, H 
    OR      PLAY_OR
    LD      H, A
    LD      (IX+VO_FREQ), L
    LD      (IX+VO_OOF), H
    
    LD      A, C  ; Voice number
    ADD     A, R_FREQ                       ; To get to the note reg for this voice
    OUT     (ADDRP), A                      ; Select the register
    LD      B, 4
    DJNZ    $
    LD      A, L
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      A, C
    ADD     A, R_OOF
    OUT     (ADDRP), A   
    LD      B, 4
    DJNZ    $
    LD      A, H
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

RET_PLAY:
    POP     IX
    POP     AF
    RET

; ------------------------------------------------------------------------------
; To use:
;   - Put the voice number in C
; ------------------------------------------------------------------------------
STOP: ; Stop a note
    PUSH    AF
    PUSH    IX
    PUSH    HL

    CALL    FIND_VOICE  

    LD      (IX+VO_FREQ), L
    LD      (IX+VO_OOF), H

    ; Set the bit to turn the note on
    LD      A, C                            ; Voice number
    ADD     A, R_OOF                        ; To get to the note reg for this voice
    OUT     (ADDRP), A                      ; Select the register
    LD      B, 4
    DJNZ    $
    LD      A, (IX+VO_OOF)                  ; Load the high byte from the workspace
    AND     STOP_AND                        ; Clear the bit to turn the note off
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    ; Clear data in the workspace
    LD      A, 0
    LD      (IX+VO_FREQ), A
    LD      (IX+VO_OOF), A

RET_STOP:
    POP     HL
    POP     IX
    POP     AF
    RET

; ------------------------------------------------------------------------------
; To use: Load the instrument data into the workspace for the voice you want,
; set C to the voice number, and call this procedure.
; ------------------------------------------------------------------------------
SET_INSTRUMENT: ; Set up an instrument
    PUSH    AF
    PUSH    BC
    PUSH    DE
    PUSH    HL
    PUSH    IX  
    CALL    FIND_VOICE  

    LD      A, C
    ADD     A, R_FEEDBK                     ; Select the Feedback register
    OUT     (ADDRP), A                      ; Set chip address
    LD      B, 4
    DJNZ    $
    LD      A, (IX + 2)                     ; Load the instrument data
    OUT     (DATAP), A                      ; Write to chip
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM1
    CALL    SET_INS_O1_REG
    LD      A, (IX + 3)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM2
    CALL    SET_INS_O1_REG
    LD      A, (IX + 4)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM3
    CALL    SET_INS_O1_REG
    LD      A, (IX + 5)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM4
    CALL    SET_INS_O1_REG
    LD      A, (IX + 6)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_WAVE
    CALL    SET_INS_O1_REG
    LD      A, (IX + 7)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM1
    CALL    SET_INS_O2_REG
    LD      A, (IX + 8)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM2
    CALL    SET_INS_O2_REG
    LD      A, (IX + 9)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM3
    CALL    SET_INS_O2_REG
    LD      A, (IX + 10)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_PARAM4
    CALL    SET_INS_O2_REG
    LD      A, (IX + 11)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    LD      B, R_WAVE
    CALL    SET_INS_O2_REG
    LD      A, (IX + 12)
    OUT     (DATAP), A
    LD      B, 14
    DJNZ    $

    POP     IX
    POP     HL
    POP     DE
    POP     BC
    POP     AF
    RET 

SET_INS_O1_REG:
    LD      H, 0
    LD      L, C
    SLA     L
    LD      DE, REG_OFFSETS
    ADD     HL, DE
    LD      A, (HL)
    ADD     A, B
    OUT     (ADDRP), A
    LD      B, 4
    DJNZ    $
    RET

SET_INS_O2_REG:
    LD      H, 0
    LD      L, C
    SLA     L
    LD      DE, REG_OFFSETS
    ADD     HL, DE
    INC     HL
    LD      A, (HL)
    ADD     A, B
    OUT     (ADDRP), A
    LD      B, 4
    DJNZ    $
    RET


; ------------------------------------------------------------------------------
; Points the IX register at the appropriate voice in the workspace
; Then you can use (IX+n) to get the offset to the bits of data you need
; ------------------------------------------------------------------------------
FIND_VOICE:
    PUSH    DE
    LD      A, C                            ; Voice number comes in on reg C
    SLA     A                               ; Multiply voice number by 16 for workspace memory offset
    SLA     A                               ; ''
    SLA     A                               ; ''
    SLA     A                               ; ''
    LD      DE, 0
    LD      E, A
    LD      IX, WRKSPC 
    ADD     IX, DE
    POP     DE
    RET 
    
; ------------------------------------------------------------------------------

; ------------------------------------------------------------------------------
NOTE_CS:    EQU $016B                       ; 277.2     C#
NOTE_D:     EQU $0181                       ; 293.7     D
NOTE_DS:    EQU $0198                       ; 311.1     D#
NOTE_E:     EQU $01B0                       ; 329.6     E
NOTE_F:     EQU $01CA                       ; 349.2     F
NOTE_FS:    EQU $01E5                       ; 370.0     F#
NOTE_G:     EQU $0202                       ; 392.0     G
NOTE_GS:    EQU $0220                       ; 415.3     G#
NOTE_A:     EQU $0241                       ; 440.0     A
NOTE_AS:    EQU $0263                       ; 466.2     A#
NOTE_B:     EQU $0287                       ; 493.9     B
NOTE_C:     EQU $02AE                       ; 523.3     C

OCTAVE0:    EQU $00
OCTAVE1:    EQU $04
OCTAVE2:    EQU $08
OCTAVE3:    EQU $0C
OCTAVE4:    EQU $10
OCTAVE5:    EQU $14
OCTAVE6:    EQU $18
OCTAVE7:    EQU $1C



; Offsets to add to base register for each voice/operator
REG_OFFSETS:
OFFSV0O0:   DB $00
OFFSV0O1:   DB $03
OFFSV1O0:   DB $01
OFFSV1O1:   DB $04
OFFSV2O0:   DB $02
OFFSV2O1:   DB $05
OFFSV3O0:   DB $08
OFFSV3O1:   DB $0B
OFFSV4O0:   DB $09
OFFSV4O1:   DB $0C
OFFSV5O0:   DB $0A
OFFSV5O1:   DB $0D
OFFSV6O0:   DB $10
OFFSV6O1:   DB $13
OFFSV7O0:   DB $11
OFFSV7O1:   DB $14
OFFSV8O0:   DB $12
OFFSV8O1:   DB $15


PLAY_OR:    EQU 00100000b
STOP_AND:   EQU 11011111b
; ------------------------------------------------------------------------------
    ENDP
; ------------------------------------------------------------------------------
