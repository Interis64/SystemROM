; ------------------------------------------------------------------------------
; VDP/Init.z80
; ------------------------------------------------------------------------------
; TMS9918A video card support, initializaton routine
;
; This will look for the video card in each of the slots. Once found, it will
; set the hardware ID in the hardware table, install the driver in RAM, and take
; over any relevant syscalls.
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------

; Temporary variables
VDP.InitInstalled:      EQU ScratchPad
VDP.InitControlPort:    EQU ScratchPad + 1
VDP.InitDataPort:       EQU ScratchPad + 2

VDP.Initialize:
    ; Clear the installed flag (this will be set based on tests later in the init routine)
    LD      A, $00
    LD      (VDP.InitInstalled), A

    CALL    VDP.LookForCard
    LD      A, (VDP.InitInstalled)
    CP      $00                             ; Check if the card is not installed
    RET     Z                               ; Bail out if card is not installed

    LD      BC, VDPDriverEnd - VDPDriverStart     ; Get the driver size
    LD      DE, VideoDriverBase             ; Set the driver destination address
    LD      HL, VDPDriverStart              ; Set the driver source address
    LDIR

    ; Install system call overrides
    LD      HL, VDPDriver.PrintChar
    LD      (SyscallTable + Syscall.PrintChar), HL        ; Override PrintChar

    ; TODO: Set the hardware ID byte for the corresponding slot

    ; Copy I/O addresses to the driver
    LD      A, (VDP.InitControlPort)
    LD      (VDPDriver.ControlPort), A
    LD      A, (VDP.InitDataPort)
    LD      (VDPDriver.DataPort), A

    LD      A, $FF                          ; Set the default cursor character
    LD      (VDPDriver.CursorChar), A
    
    LD      A, 1                            ; Enable blinking cursor
    LD      (VDPDriver.CursorBlinkEnabled), A

    LD      A, (VDPDriver.DataPort)         ; Load the IO address into A
    SRL     A                               ; A >> 4 to get IRQ number
    SRL     A
    SRL     A
    SRL     A
    LD      HL, IRQ0Vector                  ; Point HL at the interrupt table
    LD      D, 0
    LD      E, A
    ADD     HL, DE                          ; Add enough for this slot
    LD      DE, VDPDriver.IRQHandler
    LD      (HL), E                         ; Plop our IRQ routine pointer there
    INC     HL
    LD      (HL), D

	LD      B, $00                          ; Register 0
	LD      A, 00000000b                    ; Disable Mode3, Disable External VDP
	CALL    VDPDriver.WriteRegister
	
	INC     B                               ; Register 1
	LD      A, 11010000b                    ; 4116 RAM, No Blanking, Interupt Enabled, Text Mode
	CALL    VDPDriver.WriteRegister

	INC     B                               ; Register 2
	LD      A, $05                          ; Pattern Name Table Base Address 0x1400
	CALL    VDPDriver.WriteRegister

	INC     B                               ; Register 3
	LD      A, $80                          ; Color Table Base Address 0x2000
	CALL    VDPDriver.WriteRegister

	INC     B                               ; Register 4
	LD      A, $01                          ; Pattern Generator Base Address 0x0800
	CALL    VDPDriver.WriteRegister

	INC     B                               ; Register 5
	LD      A, $20                          ; Sprite Attribute Table Base Address 0x1000
	CALL    VDPDriver.WriteRegister

	INC     B                               ; Register 6
	LD      A, $00                          ; Sprite Pattern Generator Base Address 0x0000
	CALL    VDPDriver.WriteRegister

; TODO: Load color config from NVRAM

	INC     B                               ; Register 7
	LD      A, $1F                          ; Text Color 1 / Text Color 0/Backdrop
	CALL    VDPDriver.WriteRegister


    LD      A, (VDPDriver.ControlPort)
    LD      C, A
	LD      A, $00                          ; Set low byte of VRAM address 0x00
	OUT     (C), A
	LD      A, $48                          ; Set high byte of VRAM address 0x08
	OUT     (C), A
	
	LD      HL, VDPFont                     ; Load address of font
	LD      B, $00
    LD      A, (VDPDriver.DataPort)
	LD      C, A                            ; Write character glyphs to pattern table
	OTIR
	OTIR
	OTIR
	OTIR
	OTIR
	OTIR
	OTIR
	OTIR

    RET

VDP.LookForCard:
    LD      A, $80                          ; Start looking at base address 0x80
VDP.LookForCardLoop:
    LD      (VDP.InitDataPort), A           ; Store base address as data port
    INC     A
    LD      (VDP.InitControlPort), A        ; Store base address + 1 as control port

    PUSH    AF
    CALL    VDP.CheckCardExists             ; Writes and reads back some VRAM to validate the card
    JP      Z, VDP.FoundCard
    POP     AF

    CP      $E1                             ; Check if we've looked in all four slots
    RET     NC                              ; If so, we're done, no card found
    ADD     A, $1F                          ; If not, move to the next slot...
    JP      VDP.LookForCardLoop             ; and do the check again

VDP.FoundCard:
    LD      A, $01
    LD      (VDP.InitInstalled), A
    POP     AF
    RET


VDP.CheckCardExists:
    LD      DE, $1400
    LD      A, $00
    CALL    VDP.InitWriteVRAM
    CALL    VDP.InitReadVRAM
    CP      $00
    RET     NZ                              ; Values don't match, so bail

    LD      DE, $1400
    LD      A, $55
    CALL    VDP.InitWriteVRAM
    CALL    VDP.InitReadVRAM
    CP      $55
    RET     NZ                              ; Values don't match, so bail

    LD      DE, $1400
    LD      A, $AA
    CALL    VDP.InitWriteVRAM
    CALL    VDP.InitReadVRAM
    CP      $AA
    RET     NZ                              ; Values don't match, so bail

    LD      DE, $1400
    LD      A, $FF
    CALL    VDP.InitWriteVRAM
    CALL    VDP.InitReadVRAM
    CP      $FF
    RET

; Writes the data in A to VDP register number B
VDP.InitWriteRegister:
    PUSH    AF
    LD      A, (VDP.InitControlPort)
    LD      C, A
    POP     AF
    OUT     (C), A
    LD      A, B
    AND     00000111b
    OR      10000000b
    OUT     (C), A
    RET

; Writes A to the VRAM location DE
VDP.InitWriteVRAM:
    PUSH    BC
    PUSH    AF
    LD      A, (VDP.InitControlPort)
    LD      C, A
	LD      A, E
	OUT     (C), A
	LD      A, D
	AND     00111111b
	OR      01000000b
	OUT     (C), A
    LD      A, (VDP.InitDataPort)
    LD      C, A
	POP     AF
	OUT     (C), A
    POP     BC
    RET

; Reads A from the VRAM location DE
VDP.InitReadVRAM:
    PUSH    BC
    LD      A, (VDP.InitControlPort)
    LD      C, A
	LD      A, E
	OUT     (C), A
	LD      A, D
	AND     00111111b
	OUT     (C), A
    LD      A, (VDP.InitDataPort)
    LD      C, A
	IN      A, (C)
    POP     BC
    RET

    INCLUDE "VDP/Font.z80"
