; ------------------------------------------------------------------------------
; VDP/Driver.z80
; ------------------------------------------------------------------------------
; TMS9918A video card in-memory driver
; ------------------------------------------------------------------------------
; Interis 64 Z80 Computer
; https://github.com/Interis64
; 
; Copyright 2023 Matthew Martin
; Licensed under the GNU GPL 3.0. See the LICENSE file for details.
; ------------------------------------------------------------------------------

    ORG $E800                               ; Video drivers get loaded to RAM at $E800

.TextScreenEnd:      EQU $17C0              ; VRAM Address one past the last char of the screen
.CursorBlinkTime:    EQU 30                 ; Cursor blink time (number of frames)

ControlPort:         DS 1                   ; The IO address for the VDP's control port
DataPort:            DS 1                   ; The IO address for the VDP's data port
CursorChar:          DS 1                   ; The font character to display as the text mode cursor
CursorBlinkEnabled:  DS 1                   ; Non-zero if cursor blinking is enabled
.CursorPosition:     DS 2                   ; The VRAM address of the text cursor
.LinePosition:       DS 1                   ; The cursor position relative to the start of the line
.CursorCharBuffer:   DS 1                   ; Space to store the character thet's "under" the cursor (for blinking)
.CursorBlinkTimer:   DS 1                   ; Counter for making the cursor blink
.CursorVisible:      DS 1                   ; Non-zero if the cursor is currently visible
.LineCopyBuffer:     DS 240                 ; Space to copy six lines worth of text (for scrolling)

; Reserve some space for future use
    DS 6

IRQHandler:
    JP      .IRQHandler
PrintChar:
    JP      .PrintChar
ClearVRAM:
    JP      .ClearVRAM
WriteVRAM:
    JP      .WriteVRAM
WriteVRAMBlock:
    JP      .WriteVRAMBlock
ReadVRAM:
    JP      .ReadVRAM
ReadVRAMBlock:
    JP      .ReadVRAMBlock
WriteRegister:
    JP      .WriteRegister
ReadStatus:
    JP      .ReadStatus
; Reserved space for future use (16 total slots: four exist, 12 reserved)
    DS      3 * 7

.ClearVRAM:
    PUSH    AF
    PUSH    BC
    PUSH    HL
    LD      HL, $1400                       ; Set the cursor to the beginning of the
    LD      (.CursorPosition), HL            ; Pattern Name Table
    LD      A, $00                          ; Clear the LinePosition indicator
    LD      (.LinePosition), A

    LD      A, (ControlPort)
    LD      C, A
    LD      A, $00                          ; Set low byte of VRAM address 0x00
    OUT     (C), A
    LD      A, $54                          ; Set high byte of VRAM address 0x14
    OUT     (C), A
    LD      A, (DataPort)
    LD      C, A
    XOR     A
    LD      B, $04
.ClearVRAMLoop:
    PUSH    BC
    LD      B, $00
.ClearVRAMLoopInner:
    OUT     (C), A
    DJNZ    .ClearVRAMLoopInner
    POP     BC
    DJNZ    .ClearVRAMLoop

    LD      HL, $1400                       ; Set the cursor to the beginning of the
    LD      (.CursorPosition), HL            ; Pattern Name Table
    XOR     A                               ; Clear the LinePosition indicator
    LD      (.LinePosition), A
    LD      A, (ControlPort)
    LD      C, A
    XOR     A                               ; Set low byte of VRAM address 0x00
    OUT     (C), A
    LD      A, $54                          ; Set high byte of VRAM address 0x14
    OUT     (C), A
        
    POP     HL
    POP     BC
    POP     AF
    RET

.IRQHandler:
    PUSH    AF
    CALL    .ReadStatus                     ; Read the status register (clears interrupt flag)
    LD      A, (CursorBlinkEnabled)         ; Check if blinking is enabled
    CP      0
    JP      Z, .IRQExit                     ; If blinking is disabled, do nothing
    LD      A, (.CursorBlinkTimer)           ; Load the cursor blink timer
    DEC     A                               ; Decrement
    JP      NZ, .IRQExit                    ; Still have time left? Do nothing
    ; CALL    ToggleCursor                  ; Timer expired, toggle cursor visibility
.IRQExit:
    POP     AF
    EI
	RETI

.ToggleCursor:
    LD      A, (.CursorVisible)
    CP      0
    JP      Z, .SetCursorVisible
    JP      .SetCursorHidden

; Draw the cursor character at the current cursor position
.SetCursorVisible:
    PUSH    AF
    PUSH    DE
    LD      DE, (.CursorPosition)
    CALL    .ReadVRAM
    LD      (.CursorCharBuffer), A
    LD      A, (CursorChar)
    CALL    .WriteVRAM
    LD      A, 1
    LD      (.CursorVisible), A
    LD      A, .CursorBlinkTime
    LD      (.CursorBlinkTimer), A           ; Reset the blink timer
    POP     DE
    POP     AF
    RET

; Draw the screen character at the current cursor position
.SetCursorHidden:
    PUSH    AF
    PUSH    DE
    LD      DE, (.CursorPosition)            ; Gets the current cursor position
    LD      A, (.CursorCharBuffer)           ; Loads the buffered character from memory
    CALL    .WriteVRAM                       ; Replace the cursor char on screen
    LD      A, 0                    
    LD      (.CursorVisible), A              ; Un-set the cursor-visible flag
    LD      A, .CursorBlinkTime
    LD      (.CursorBlinkTimer), A           ; Reset the blink timer
    POP     DE
    POP     AF
    RET

; Writes A to the VRAM location DE
.WriteVRAM:
    PUSH    BC
    PUSH    AF
    LD      A, (ControlPort)
    LD      C, A
	LD      A, E
	OUT     (C), A
	LD      A, D
	AND     00111111b
	OR      01000000b
	OUT     (C), A
    LD      A, (DataPort)
    LD      C, A
	POP     AF
	OUT     (C), A
    POP     BC
    RET

; Writes data from memory addresses HL to HL + B starting at VRAM address DE
.WriteVRAMBlock:
    PUSH    AF
    PUSH    BC
    LD      A, (ControlPort)
    LD      C, A
	LD      A, E
	OUT     (C), A
	LD      A, D
	AND     00111111b
	OR      01000000b
	OUT     (C), A
	LD      A, (DataPort)
    LD      C, A
.WriteVRAMBlockLoop:
    LD      A, (HL)
    OUT     (C), A
    INC     HL
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    DJNZ    .WriteVRAMBlockLoop
    POP     BC
    POP     AF
    RET

; Reads the VDP status register into A
.ReadStatus:
    PUSH    BC
    LD      A, (ControlPort)
    LD      C, A
    IN      A, (C)
    POP     BC
    RET

; Reads A from the VRAM location DE
.ReadVRAM:
    PUSH    BC
    LD      A, (ControlPort)
    LD      C, A
	LD      A, E
	OUT     (C), A
	LD      A, D
	AND     00111111b
	OUT     (C), A
    LD      A, (DataPort)
    LD      C, A
	IN      A, (C)
    POP     BC
    RET

; Reads data into memory addresses HL to HL + B starting at VRAM address DE
.ReadVRAMBlock:
    PUSH    AF
    PUSH    BC
    LD      A, (ControlPort)
    LD      C, A
    LD      A, E
    OUT     (C), A
    LD      A, D
    AND     00111111b
    OUT     (C), A
    LD      A, (DataPort)
    LD      C, A
    INIR
    POP     BC
    POP     AF
    RET

; Writes the data in A to VDP register number B
.WriteRegister:
    PUSH    AF
    LD      A, (ControlPort)
    LD      C, A
    POP     AF
    OUT     (C), A
    LD      A, B
    AND     00000111b
    OR      10000000b
    OUT     (C), A
    RET

; Prints the byte in A as an ASCII character at the cursor position and advances the cursor
.PrintChar:
    PUSH    AF
    CP      $0C                         ; Handle Form Feed (clear screen)
    JP      Z, .PrintFF
    CP      '\r'                        ; Handle carriage return
    JP      Z, .PrintCR
    CP      '\n'                        ; Handle line feed
    JP      Z, .PrintLF
    CP      $07
    JP      Z, .PrintBEL
    CP      $08
    JP      Z, .PrintBS
    PUSH    BC
    PUSH    DE
    CALL    .SetCursorHidden                 ; Hide the cursor so we don't lose on-screen characters
    LD      DE, (.CursorPosition)            ; Load the cursor's current position
    CALL    .WriteVRAM                       ; Write our character
    INC     DE                              ; Increment the cursor position
    LD      (.CursorPosition), DE            ; Save cursor position
    CALL    .IncrementLinePosition           ; Increment the position on the current line
    CALL    .SetCursorVisible                ; Re-enable the cursor
    POP     DE
    POP     BC
    POP     AF
    RET

; Handle a carriage return (return the cursor to the beginning of the line)
.PrintCR:
    PUSH    AF
    PUSH    DE
    CALL    .SetCursorHidden
    LD      DE, (.CursorPosition)
    LD      A, (.LinePosition)
.PrintCRLoop:
    CP      0
    JP      Z, .PrintCRDone
    DEC     DE
    DEC     A
    JP      .PrintCRLoop
.PrintCRDone:
    LD      (.CursorPosition), DE
    LD      (.LinePosition), A
    CALL    .SetCursorVisible
    POP     DE
    POP     AF
    POP     AF
    RET

; Handle a line-feed (advance the cursor by one line, check screen scroll)
.PrintLF:
    PUSH    BC
    PUSH    DE
    CALL    .SetCursorHidden
    LD      DE, (.CursorPosition)
    LD      B, 40
.PrintLFLoop:
    INC     DE
    DJNZ    .PrintLFLoop
    LD      (.CursorPosition), DE
    CALL    .CheckScreenScroll
    CALL    .SetCursorVisible
    POP     DE
    POP     BC
    POP     AF
    RET

; Handles the BEL character
.PrintBEL:
    PUSH    AF
    LD      A, $10
    LD      ($FFFF), A
    POP     AF
    RST     $10
    POP     AF
    RET

; Handles the backspace character
.PrintBS:
    PUSH    DE
    PUSH    HL

    CALL    .SetCursorHidden                 ; Hide the cursor
    LD      DE, (.CursorPosition)            ; Get the current cursor position
    DEC     DE                              ; Go back a char
    LD      A, $00
    CALL    .WriteVRAM
    LD      (.CursorPosition), DE
    CALL    .DecrementLinePosition
    CALL    .SetCursorVisible
    POP     HL
    POP     DE
    POP     AF
    RET

.PrintFF:
    CALL    .ClearVRAM
    POP     AF
    RET

.IncrementLinePosition:
    PUSH    AF
    LD      A, (.LinePosition)
    INC     A
    CP      40
    JR      NC, .ResetLinePosition
    LD      (.LinePosition), A
    POP     AF
    RET
.ResetLinePosition:
    XOR     A
    LD      (.LinePosition), A
    CALL    .CheckScreenScroll
    POP     AF
    RET

.DecrementLinePosition:
    PUSH    AF
    LD      A, (.LinePosition)
    CP      0
    JR      Z, .DecrementLinePositionReset
    DEC     A
    LD      (.LinePosition), A
    POP     AF
    RET
.DecrementLinePositionReset:
    LD      A, 40
    LD      (.LinePosition), A
    POP     AF
    RET

.CheckScreenScroll:
    PUSH    DE
    PUSH    HL
    
    LD      HL, (.CursorPosition)
    LD      DE, .TextScreenEnd
    OR      A                               ; CP HL, DE
    SBC     HL, DE                          ; CP HL, DE
    ADD     HL, DE                          ; CP HL, DE
    POP     HL
    POP     DE
    RET     C                               ; Not at the end of the screen, nothing to do

    PUSH    AF
    PUSH    BC
    PUSH    DE
    PUSH    HL

    LD      HL, .LineCopyBuffer          
    LD      DE, $1428                       ; Start at the second line
    LD      B, 240
    CALL    .ReadVRAMBlock                   ; read 6 lines
    LD      HL, .LineCopyBuffer
    LD      DE, $1400                       ; Go back to the first line
    LD      B, 240
    CALL    .WriteVRAMBlock                  ; write 6 lines
    
    LD      HL, .LineCopyBuffer          
    LD      DE, $1518                   
    LD      B, 240
    CALL    .ReadVRAMBlock
    LD      HL, .LineCopyBuffer
    LD      DE, $14F0
    LD      B, 240
    CALL    .WriteVRAMBlock
    
    LD      HL, .LineCopyBuffer          
    LD      DE, $1608                   
    LD      B, 240
    CALL    .ReadVRAMBlock
    LD      HL, .LineCopyBuffer
    LD      DE, $15E0
    LD      B, 240
    CALL    .WriteVRAMBlock
    
    LD      HL, .LineCopyBuffer          
    LD      DE, $16F8                   
    LD      B, 240
    CALL    .ReadVRAMBlock
    LD      HL, .LineCopyBuffer
    LD      DE, $16D0
    LD      B, 240
    CALL    .WriteVRAMBlock

    LD      HL, (.CursorPosition)
    LD      B, 40
    DEC     HL
    DJNZ    $-1
    LD      (.CursorPosition), HL
    
    POP     HL
    POP     DE
    POP     BC
    POP     AF
    RET

